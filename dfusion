#!/usr/bin/env python3

# cli.py
import click
from gql import gql, Client
from gql.transport.requests import RequestsHTTPTransport

from helpers.constants import SEPARATOR, RETRIES, URL_THE_GRAPH
from helpers.trades import TRADE_FIELDS, toTradeDto, print_trades_pretty, print_trades_csv

@click.group()
def main():
    """
    dFusion CLI âœ¨
    """
    pass

@main.command()
@click.option('--count', default=10, help='Number of trades to return, used for pagination')
@click.option('--skip', default=0, help='Number of trades to skip, used for pagination')
@click.option('--sort', default="tradeBatchId", help='Sort result by a field, used for pagination')
@click.option('--format', default="pretty", help='Format type i.e. pretty, csv')
@click.option('-v', '--verbose', count=True)
@click.option('--trader', help='Ethereum address of the trader')
def trades(count, skip, sort, format, verbose, trader):
    """Get trades"""
    if trader:
      filters = ', where: { owner:"%s"}' % (trader)
    else:
      filters = ''

    query = '''
{
  trades (first: %s , skip: %s, orderBy: %s%s) {%s}
}
    ''' %(count, skip, sort, filters, TRADE_FIELDS)

    if verbose > 0:
      click.echo('%s\n%s\n%s' % (
        click.style(SEPARATOR, fg='red'),
        query,
        click.style(SEPARATOR, fg='red'))
      )

    client = _getClient()
    result = client.execute(gql(query))
    tradesDto = map(toTradeDto, result['trades'])
    _print_trades(tradesDto, format)

def _print_trades(trades, format):
  if format == 'pretty':    
    print_trades_pretty(trades)
  elif format == 'csv':
    print_trades_csv(trades)
  else:
    raise Exception('Format "%s" is not supported. Supported formats are: pretty, csv' % (format))  

def _getClient():
  return Client(
    retries = RETRIES,
    transport = RequestsHTTPTransport(
      url = URL_THE_GRAPH,
      use_json = True
    )
  )

if __name__ == "__main__":
    click.echo('\n' + click.style('''\
     _______         _             
    | |  ___|       (_)            
  __| | |_ _   _ ___ _  ___  _ __  
 / _` |  _| | | / __| |/ _ \| '_ \ 
| (_| | | | |_| \__ \ | (_) | | | |
 \__,_\_|  \__,_|___/_|\___/|_| |_|''', fg='yellow', bold=True) + '\n')
    main()